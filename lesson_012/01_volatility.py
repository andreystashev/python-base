# -*- coding: utf-8 -*-


# Описание предметной области:
#
# При торгах на бирже совершаются сделки - один купил, второй продал.
# Покупают и продают ценные бумаги (акции, облигации, фьючерсы, етс). Ценные бумаги - это по сути долговые расписки.
# Ценные бумаги выпускаются партиями, от десятка до несколько миллионов штук.
# Каждая такая партия (выпуск) имеет свой торговый код на бирже - тикер - https://goo.gl/MJQ5Lq
# Все бумаги из этой партии (выпуска) одинаковы в цене, поэтому говорят о цене одной бумаги.
# У разных выпусков бумаг - разные цены, которые могут отличаться в сотни и тысячи раз.
# Каждая биржевая сделка характеризуется:
#   тикер ценнной бумаги
#   время сделки
#   цена сделки
#   обьем сделки (сколько ценных бумаг было куплено)
#
# В ходе торгов цены сделок могут со временем расти и понижаться. Величина изменения цен называтея волатильностью.
# Например, если бумага №1 торговалась с ценами 11, 11, 12, 11, 12, 11, 11, 11 - то она мало волатильна.
# А если у бумаги №2 цены сделок были: 20, 15, 23, 56, 100, 50, 3, 10 - то такая бумага имеет большую волатильность.
# Волатильность можно считать разными способами, мы будем считать сильно упрощенным способом -
# отклонение в процентах от полусуммы крайних значений цены за торговую сессию:
#   полусумма = (максимальная цена + минимальная цена) / 2
#   волатильность = ((максимальная цена - минимальная цена) / полусумма) * 100%
# Например для бумаги №1:
#   half_sum = (12 + 11) / 2 = 11.5
#   volatility = ((12 - 11) / half_sum) * 100 = 8.7%
# Для бумаги №2:
#   half_sum = (100 + 3) / 2 = 51.5
#   volatility = ((100 - 3) / half_sum) * 100 = 188.34%
#
# В реальности волатильность рассчитывается так: https://goo.gl/VJNmmY
#
# Задача: вычислить 3 тикера с максимальной и 3 тикера с минимальной волатильностью.
# Бумаги с нулевой волатильностью вывести отдельно.
# Результаты вывести на консоль в виде:
#   Максимальная волатильность:
#       ТИКЕР1 - ХХХ.ХХ %
#       ТИКЕР2 - ХХХ.ХХ %
#       ТИКЕР3 - ХХХ.ХХ %
#   Минимальная волатильность:
#       ТИКЕР4 - ХХХ.ХХ %
#       ТИКЕР5 - ХХХ.ХХ %
#       ТИКЕР6 - ХХХ.ХХ %
#   Нулевая волатильность:
#       ТИКЕР7, ТИКЕР8, ТИКЕР9, ТИКЕР10, ТИКЕР11, ТИКЕР12
# Волатильности указывать в порядке убывания. Тикеры с нулевой волатильностью упорядочить по имени.
#
# Подготовка исходных данных
# 1. Скачать файл https://drive.google.com/file/d/1l5sia-9c-t91iIPiGyBc1s9mQ8RgTNqb/view?usp=sharing
#       (обратите внимание на значок скачивания в правом верхнем углу,
#       см https://drive.google.com/file/d/1M6mW1jI2RdZhdSCEmlbFi5eoAXOR3u6G/view?usp=sharing)
# 2. Раззиповать средствами операционной системы содержимое архива
#       в папку python_base/lesson_012/trades
# 3. В каждом файле в папке trades содержится данные по сделакам по одному тикеру, разделенные запятыми.
#   Первая строка - название колонок:
#       SECID - тикер
#       TRADETIME - время сделки
#       PRICE - цена сделки
#       QUANTITY - количество бумаг в этой сделке
#   Все последующие строки в файле - данные о сделках
#
# Подсказка: нужно последовательно открывать каждый файл, вычитывать данные, высчитывать волатильность и запоминать.
# Вывод на консоль можно сделать только после обработки всех файлов.
#
# Для плавного перехода к мультипоточности, код оформить в обьектном стиле, используя следующий каркас
#
import os

# TODO постараюсь немного ответить общим ответом на все ваши вопросы, и направить вас в нужное русло!


# TODO ВАЖНО главная задача добиться чтобы класс обрабатывал только один билет на валатильность!
# TODO на вход получаем путь до файла который будем обрабатывать!
class Ticker:
    # TODO нейминг переменных, list dict использовать их явно и в названиях не рекомендуется
    list = []
    dict = {}

    def __init__(self, ticket_folder):
        # TODO из параметров у нас будет полный путь до файла!
        # TODO И еще два параметра это имя билета self.name_ticket = ''
        # TODO и сама волатильность self.volatility = 0
        # TODO остальное у нас будет локальными переменными в методах
        self.ticket_folder = ticket_folder
        self.prev_name = ''
        self.prev_price = 0

# частично взял в пример log parser из 9го модуля, но не пойму, нужно ли вводить здесь сравнение с предыдущим
#  элементом, ведь тут всё поделено на файлы, и такая сложная конструкция ради перескакивания с одного файла на другой
#  кажется нелогичной
# TODO нет тут сравнивать не нужно

    # TODO по заданию в методе run который будет запускать нужные нам внутренние методы!
    # TODO метод который открывает файл и читает его возвращая список данных для обработки! Также запоминая имя билета.
    # TODO метод который обрабатывает данные и получает валатильность!
    def run(self):
        # TODO часть с этим нужно будет вынести или в майн но лучше в утилиты
        for dirpath, dirnames, filenames in os.walk(self.ticket_folder):
            for ticket_files in filenames:
                # TODO открывать и обрабатывать строки будем в отдельном методе
                open_ticker = open(folder + ticket_files, mode='r')
                for element in open_ticker:
                    # TODO тут можно воспользоваться сплитом и разбить по запятой
                    name = element[0:4]
                    price = element[15:20]
                    #print(price)
                    counter = 0
                    if name == self.prev_name: # так сделал чтобы если один файл закончился, не продолжились вычисления
                        counter +=1
                        half_sum = (self.prev_price + float(price))/counter
                        self.prev_price += float(price)
                        volatility = ((self.prev_price - float(price)) / half_sum) * 100 #todo тут видимо какие-то строки
                                                                                        #  надо на уровень выше перенести
                        self.list.append((name, volatility))
                    elif name != self.prev_name:
                        self.prev_name = name
            self.dict.update(self.list)
            # print(self.dict)
            # TODO нейминг переменной, list использовать в названиях не рекомендуется
            final_list = []
            for k in self.dict:
                final_list.append(k+' - '+str(self.dict.get(k)))

            final_list.sort()
            # todo здесь при корректных рассчетах по идее должно быть вначале несколько значений с нулем(нулевая волатильность)
            #  и тогда можно пройтись циклом фор по списку и если 0, то вывести на консоль. Правильно?
            print(final_list[0:3], 'наименьшие')
            print(final_list[-3:], 'наибольшие')


# TODO к сожалению у меня нет такого пути
# TODO Код подебажить не удалось.
folder = "/Users/andrey/PycharmProjects/python_base/lesson_012/trades/"

ticker = Ticker(ticket_folder=folder)
ticker.run()

# TODO тут напишем if __name__ == '__main__':
# TODO и вы вызовем функции main() в которой у нас будет все логика работы программы!

# TODO Создадим модуль утилиты, в него вынесем все дополнительные функции, такие как принты в консоль,
# TODO обработку путей до файлов.
#  Также добавим в утилиты декоратор time_track из прошлых заданий, будем трекать время работы.


# TODO в функции main() должно быть три цикла, в первом вы записываете в словарь экземпляры класса
# TODO во Втором, проходясь по списку с экземплярами класса, запускаете метод .run()
# TODO в Третьем, вы проходясь по списку с экземплярами класса, получаете параметр volatility и обрабатываете его!

