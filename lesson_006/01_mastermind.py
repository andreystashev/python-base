# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import simple_draw as sd

num1 = sd.random_number(1, 9)
num2 = sd.random_number(0, 9)
num3 = sd.random_number(0, 9)
num4 = sd.random_number(0, 9)
trying = 0

if num1 != num2 and num1 != num3 and num2 != num3 and num1 != num4 and num2 != num4 and num3 != num4:
    while True:
        trying += 1

        zet = num1, num2, num3, num4
        # print(zet[0], zet[1], zet[2], zet[3], sep='')  # показ числа

        value_input = input("Введите четырехзначное число: ")
        shape_input = value_input
        if int(value_input[0]) != int(value_input[1]) and int(value_input[0]) != int(value_input[2]) and int(
                value_input[1]) != int(value_input[2]) and int(value_input[0]) != int(value_input[3]) and int(
            value_input[1]) != int(value_input[3]) and int(value_input[2]) != int(value_input[3]) and 999 < int(
            value_input) < 9999:

            bull = 0
            if int(value_input[0]) == int(zet[0]):
                bull += 1
            if int(value_input[1]) == int(zet[1]):
                bull += 1
            if int(value_input[2]) == int(zet[2]):
                bull += 1
            if int(value_input[3]) == int(zet[3]):
                bull += 1
            if bull == int(4):
                print('вы выиграли за ', trying, 'попыток')
                value_input1 = input("Еще партию? Для продолжения нажмите - y, для выхода любую клавишу: ")
                if value_input1 == 'y':
                    print('продолжаем')

                    num1 += sd.random_number(0, 9) and num1 < 9 and num1 != num2 and num1 != num3 and num1 != num4
                    num2 += sd.random_number(0, 9) and num2 < 9 and num2 != num1 and num2 != num3 and num2 != num4
                    num3 += sd.random_number(0, 9) and num3 < 9 and num3 != num1 and num3 != num2 and num3 != num4
                    num4 += sd.random_number(0, 9) and num4 < 9 and num4 != num1 and num4 != num2 and num4 != num3

                else:
                    print('досвидания')
                    break

            kow = 0
            if int(value_input[0]) == int(zet[1]):
                kow += 1
            if int(value_input[0]) == int(zet[2]):
                kow += 1
            if int(value_input[0]) == int(zet[3]):
                kow += 1
            if int(value_input[1]) == int(zet[0]):
                kow += 1
            if int(value_input[1]) == int(zet[2]):
                kow += 1
            if int(value_input[1]) == int(zet[3]):
                kow += 1
            if int(value_input[2]) == int(zet[0]):
                kow += 1
            if int(value_input[2]) == int(zet[1]):
                kow += 1
            if int(value_input[2]) == int(zet[3]):
                kow += 1
            if int(value_input[3]) == int(zet[0]):
                kow += 1
            if int(value_input[3]) == int(zet[1]):
                kow += 1
            if int(value_input[3]) == int(zet[2]):
                kow += 1

            print('>  быки - ', bull, ', коровы - ', kow)
        else:
            print('неверный ввод')


# todo в данном решении осталось несколько недоработок: если число случайно выбирается несоответствующее требованием, то
#     программу приходится перезапускать до того момента, пока не выберется корректное. При выигрыше в случае если пользователь
#     по новой начинает, то первые условия не срабатывают и может отобразиться число с двумя и более одинаковыми цифрами. Не
#     пойму, как их устранить